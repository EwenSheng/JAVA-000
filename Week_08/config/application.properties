# https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/usage/sharding/spring-boot-starter/
server.port=8801

# 配置真实数据源
spring.shardingsphere.datasource.names=ds-0,ds-1
#spring.shardingsphere.datasource.names=ds0
# 配置第 1 个数据源
spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-0.jdbc-url=jdbc:mysql://127.0.0.1:3308/ds_0?useSSL=false
spring.shardingsphere.datasource.ds-0.username=root
spring.shardingsphere.datasource.ds-0.password=123456
# 配置第 2 个数据源
spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds-1.jdbc-url=jdbc:mysql://127.0.0.1:3308/ds_1?useSSL=false
spring.shardingsphere.datasource.ds-1.username=root
spring.shardingsphere.datasource.ds-1.password=123456
# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds-$->{user_id % 2}

# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点
# 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.sharding.tables.order.actual-data-nodes=ds_$->{0..1}.order$->{0..15}
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..15}
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=id
# 分片算法表达式
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{id % 16}
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#spring.shardingsphere.sharding.binding-tables=t_order
#spring.shardingsphere.sharding.broadcast-tables=

spring.shardingsphere.props.sql.show=true

#spring.shardingsphere.rules.sharding.tables.order.actual-data-nodes=demo_ds_$->{0..1}.order_$->{0..15}
# 配置分库策略
#spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.order.database-strategy.standard.sharding-algorithm-name=database
# 配置分表策略
#spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-column=id
#spring.shardingsphere.rules.sharding.tables.order.table-strategy.standard.sharding-algorithm-name=table
#spring.shardingsphere.rules.sharding.binding-tables=order
#spring.shardingsphere.rules.sharding.broadcast-tables=
# 配置 分片算法
#spring.shardingsphere.rules.sharding.sharding-algorithms.database.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.database.props.algorithm-expression=demo_ds_$->{user_id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.table.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.table.props.algorithm-expression=order_$->{id % 16}
#spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
#spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123